% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Simulation.R
\name{Simulation}
\alias{Simulation}
\title{Simulation class}
\description{
Class for running a simulation and getting results.
}
\details{
The \code{Simulation} class is used to set up and run a daily
  simulation over a particular period. Portfolio construction parameters and
  other simulator settings can be configured in a yaml file that is passed to
  the object's constructor. See the package vignette for information on
  configuration file setup.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Simulation$new()}}
\item \href{#method-setVerbose}{\code{Simulation$setVerbose()}}
\item \href{#method-setShinyCallback}{\code{Simulation$setShinyCallback()}}
\item \href{#method-getSecurityReference}{\code{Simulation$getSecurityReference()}}
\item \href{#method-run}{\code{Simulation$run()}}
\item \href{#method-getSimDates}{\code{Simulation$getSimDates()}}
\item \href{#method-clone}{\code{Simulation$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{Simulation} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Simulation$new(
  config,
  raw_input_data = NULL,
  raw_pricing_data = NULL,
  security_reference_data = NULL,
  delisting_dates_data = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{config}}{An object of class \code{list} or \code{character}. If the
value passed is a character vector, it should be of length 1 and
specify the path to a yaml configuration file that contains the
object's configuration info. If the value passed is of class list(),
the list should contain the object's configuration info in list form
(e.g, the return value of calling \code{yaml.load_file} on the
configuration file).}

\item{\code{raw_input_data}}{A data frame that contains all of the input data
(for all periods) for the simulation. The data frame must have a
\code{date} column. If \code{NULL}, input data will taken from daily
files specified in \code{config}. Defaults to \code{NULL}.}

\item{\code{raw_pricing_data}}{A data frame that contains all of the input data
(for all periods) for the simulation. The data frame must have a
\code{date} column. If \code{NULL}, pricing data will taken from daily
files specified in \code{config}. Defaults to \code{NULL}.}

\item{\code{security_reference_data}}{A data frame that contains reference data
on the securities in the simulation, including any categories that are
used in portfolio construction constraints. Note that the simulator
will throw an error if there are input data records for which there is
no entry in the security reference.}

\item{\code{delisting_dates_data}}{A data frame that contains the dates on which
securities are delisted. It must contain two columns: id (character)
and delisting_date (Date). The date in the delisting_date column means
the day on which a stock will be removed from the simulation portfolio,
at the beginning of the day, due to delisting. If \code{NULL},
delisting data will taken from a file specified in \code{config}.
Defaults to \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{Simulation} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setVerbose"></a>}}
\if{latex}{\out{\hypertarget{method-setVerbose}{}}}
\subsection{Method \code{setVerbose()}}{
Set the verbose flag to control info output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Simulation$setVerbose(verbose)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{Logical flag indicating whether to be verbose or not.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setShinyCallback"></a>}}
\if{latex}{\out{\hypertarget{method-setShinyCallback}{}}}
\subsection{Method \code{setShinyCallback()}}{
Set the callback function for updating progress when running
  a simulation in shiny.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Simulation$setShinyCallback(callback)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{callback}}{A function suitable for updating a shiny Progress object.
It must have two parameters: \code{value}, indicating the progress
amount, and detail, and \code{detail}, a text string for display on the
progress bar.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSecurityReference"></a>}}
\if{latex}{\out{\hypertarget{method-getSecurityReference}{}}}
\subsection{Method \code{getSecurityReference()}}{
Get security reference information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Simulation$getSecurityReference()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The security reference data frame for the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\if{latex}{\out{\hypertarget{method-run}{}}}
\subsection{Method \code{run()}}{
Run the simulation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Simulation$run()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An object of class \code{SimResult} that contains the results of the simulation.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSimDates"></a>}}
\if{latex}{\out{\hypertarget{method-getSimDates}{}}}
\subsection{Method \code{getSimDates()}}{
Get a list of all date for the simulation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Simulation$getSimDates()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A vector of dates over which the simulation currently iterates: all
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Simulation$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
